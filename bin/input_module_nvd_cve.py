
# encoding = utf-8

import os
import sys
import time
from datetime import datetime, timedelta
import nvdlib
import json
import ast
'''
    IMPORTANT
    Edit only the validate_input and collect_events functions.
    Do not edit any other part in this file.
    This file is generated only once when creating the modular input.
'''
'''
# For advanced users, if you want to create single instance mod input, uncomment this method.
def use_single_instance_mode():
    return True
'''

def validate_input(helper, definition):
    """Implement your own validation logic to validate the input stanza configurations"""
    # This example accesses the modular input variable
    # api_key = definition.parameters.get('api_key', None)
    pass

def get_start_date(helper, check_point_key):
    
    # Try to get a date from the check point first
    d = helper.get_check_point(check_point_key)
    
    # If there was a check point date, retun it.
    if (d not in [None,'']):
        return d
    else:
        # No check point date, so look if a start date was specified as an argument
        d = helper.get_arg("published_start_date")
        if (d not in [None,'']):
            return d

def collect_events(helper, ew):

    check_point_key = "%s_obj_checkpoint" % helper.get_input_stanza_names()
    start_date = get_start_date(helper,check_point_key)
    opt_api_key = helper.get_arg('api_key')
    current_utc_datetime = datetime.utcnow()
    current_utc_string = current_utc_datetime.strftime("%Y-%m-%d %H:%M")
    
    if  opt_api_key == "":
        res = nvdlib.searchCVE(pubStartDate=start_date, pubEndDate=current_utc_string)
    else:
        res = nvdlib.searchCVE(pubStartDate=start_date, pubEndDate=current_utc_string, key=opt_api_key)
    
    for r in res:
        event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(ast.literal_eval(str(r))))
        ew.write_event(event)
    helper.save_check_point(check_point_key, current_utc_string)
    
    
